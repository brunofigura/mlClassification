import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

class MLP(nn.Module):
        def __init__(self,input_size, output_size):
            super(MLP, self).__init__()
            self.input_size = input_size
            self.fc1 = nn.Linear(input_size, 450)
            self.relu = nn.ReLU()
            self.fc2 = nn.Linear(450, 200)
            self.fc3 = nn.Linear(200, 100)
            self.fc4 = nn.Linear(100, output_size)

        def forward(self, x):
            x = x.view(-1, self.input_size)  # Flatten the image
            x = self.fc1(x)
            x = self.relu(x)
            x = self.fc2(x)
            x = self.relu(x)
            x = self.fc3(x)
            x = self.relu(x)
            x = self.fc4(x)
            return F.log_softmax(x, -1)
        
class Classifier:
    def __init__(self, n_epochs, init_lr):

        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        self.batch_size = 64
        self.n_epochs = n_epochs
        self.init_lr = init_lr

        transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
        ])

        self.train_dataset = torchvision.datasets.CIFAR10(root='./data',
                                train=True,
                                download=True,
                                transform=transform)

        self.test_dataset = torchvision.datasets.CIFAR10(root='./data',
                            train=False,
                            download=True,
                            transform=transform)
        
        self.train_loader = torch.utils.data.DataLoader(self.train_dataset,
                                    shuffle=True,
                                    batch_size=self.batch_size)


        self.test_loader = torch.utils.data.DataLoader(self.test_dataset,
                                    batch_size=self.batch_size)
        
        self.network = MLP()
        self.network = self.network.to(self.device)

        self.optimizer = optim.Adam(self.network.parameters(), self.init_lr)
        
        self.train_losses = []
        self.train_counter = []
        self.test_losses = []
        self.test_counter = [i * len(self.train_loader.dataset) for i in range(self.n_epochs + 1)]

    def train(self, epoch, log_interval):
        self.network.train()
        for batch_idx, (data, target) in enumerate(self.train_loader):
            data, target = data.to(self.device), target.to(self.device)
            self.optimizer.zero_grad()
            output = self.network(data)
            loss = nn.CrossEntropyLoss(output, target)
            loss.backward()
            self.optimizer.step()
            if batch_idx % log_interval == 0:
                print(f'Train Epoch: {epoch} '
                      f'[{batch_idx * len(data)}'
                      f'/{len(self.train_loader.dataset)} '
                      f'({100. * batch_idx / len(self.train_loader):.0f}%)]'
                      f'\tLoss: {loss.item():.6f}', end='\r')
                self.train_losses.append(loss.item())
                self.train_counter.append(
                    (batch_idx * self.batch_size) + ((epoch - 1) * len(self.train_loader.dataset)))
                
    def test(self):
        self.network.eval()
        test_loss = 0
        correct = 0
        with torch.no_grad():
            for data, target in self.test_loader:
                data, target = data.to(self.device), target.to(self.device)
                output = self.network(data)
                test_loss += nn.CrossEntropyLoss(output, target).item()
                pred = output.data.max(1, keepdim=True)[1]
                correct += pred.eq(target.data.view_as(pred)).sum()
        test_loss /= len(self.test_loader.dataset)
        self.test_losses.append(test_loss)
        print(f'\nTest set: Avg. loss: {test_loss:.4f}, '
              f'Accuracy: {correct}'
              f'/{len(self.test_loader.dataset)}'
              f'({100. * correct / len(self.test_loader.dataset):.0f}%)\n')
        
    def plot_res(self):
        fig, axs = plt.subplots(ncols=2)
        axs[0].set_title("Training")
        axs[0].plot(self.train_losses)
        axs[1].set_title("Validation")
        axs[1].plot(self.test_losses)
        plt.show()
